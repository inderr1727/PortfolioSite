
<body>
    <section class="statistics">
        <div class="container">
            <div class="stat">
                <span class="number" data-target="10">0</span><span>+</span>
                <p>Years of Experience</p>
            </div>
            <div class="stat">
                <span class="number" data-target="100">0</span><span>+</span>
                <p>Estate Plans Created</p>
            </div>
            <div class="stat">
                <span class="number" data-target="250">0</span><span>+</span>
                <p>Cases Handled</p>
            </div>
            <div class="stat">
                <span class="number" data-target="400">0</span><span>+</span>
                <p>Court Appearances Made</p>
            </div>
        </div>
    </section>

    <script>
      function animateStats() {
          const counters = document.querySelectorAll('.number');
          const speed = 200; // The lower the value, the faster the animation

          counters.forEach( counter => {
          const updateCount = () => {
              const target = +counter.getAttribute('data-target');
              const count = +counter.innerText;

              const inc = target / speed;

                if(count < target) {
                    counter.innerText = Math.ceil(count + inc);
                    setTimeout(updateCount, 1);
                  } else {
                      counter.innerText = target;
              }
          }

        updateCount();
    });
  }


    // Check if the section is in the viewport
const statsSection = document.querySelector('.statistics');
const options = {
    root: null, // Use the viewport as the root
    rootMargin: '0px',
    threshold: 0.5 // Trigger when 50% of the section is visible
};

const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            // Run the animation when the section is visible
            animateStats();
            observer.unobserve(entry.target); // Stop observing once animated
        }
    });
}, options);


observer.observe(statsSection);    
    </script>
</body>
</html>














/* Statistics Section Styles */

.statistics {
  background-color: #F8F9FB;
  padding: 80px 0;
  border-radius: 20px;
  text-align: center;
}

.container {
  max-width: 1200px;
  margin: 0 auto; /* Centers the container */
  display: flex;
  justify-content: space-around;
  align-items: center;

}

.stat {
  flex: 1;  /*distributes available space equally among them */
}


.stat .number {
  font-family: "Inter", sans-serif;
  font-size: 48px;
  font-weight: 700;
  color: #1C2431;
  display: inline-block; /* allows for better positioning alongside the '+' */
  margin-right: 5px;   /* Small spacing between number and '+' */

}

.stat span{  /* style for the plus sign*/
  font-size: 30px;
  font-weight: 600;

}


.stat p {
  font-family: "Inter", sans-serif;
  font-size: 16px;
  color: #5A6A7C;
  margin-top: 5px;
  letter-spacing: 0.5px;
  opacity: 0; /* Initially hide the text */
  animation: fadeIn 1s ease-in-out forwards; /* Apply fade-in animation */
  animation-delay: 0.3s; /* Delay the animation */


}

@keyframes fadeIn {
  from {
      opacity: 0;
  }
  to {
      opacity: 1;
  }
}






for  768 px



  .container {
    flex-wrap: wrap; /*allows stats to wrap*/
    justify-content: center;
    gap: 10px;;

  }

  .stat {
    flex-basis: calc(50% - 40px); /* Two stats per row with some margin */
    margin-bottom: 30px; /* Adjust as needed */
  }





  for 480px



    .stat {
    margin-bottom: 30px;  /* Adds spacing between stats */
    text-align: center; /*center text and number*/
    flex-basis: 100%;
  }

  .container {
    flex-direction: column;  /* Stacks stats vertically on smaller screens */
    align-items: center;      /* Centers stats horizontally */

  }